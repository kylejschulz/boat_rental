require 'minitest/autorun'
require 'minitest/pride'
require './lib/dock'
require './lib/renter'
require './lib/boat'

class DockTest < Minitest::Test
  def setup
    @dock = Dock.new("The Rowing Dock", 3)
    @kayak_1 = Boat.new(:kayak, 20) # => #<Boat:0x00007fdeedb3a528...>
    @kayak_2 = Boat.new(:kayak, 20) # => #<Boat:0x00007fdeedae1860...>
    @patrick = Renter.new("Patrick Star", "4242424242424242") # => #<Renter:0x00007fdeed0ab828...>
    @eugene = Renter.new("Eugene Crabs", "1313131313131313") # => #<Renter:0x00007fdeed8ce5c8...>
    @canoe = Boat.new(:canoe, 25)
    @sup_1 = Boat.new(:standup_paddle_board, 15)
    @sup_2 = Boat.new(:standup_paddle_board, 15)
  end

  def test_it_exists
    assert_instance_of Dock, @dock
  end

  def test_it_has_attributes
    assert_equal "The Rowing Dock", @dock.name # =>
    assert_equal 3, @dock.max_rental_time # => 3
  end

  def test_it_can_rent_and_log
    skip
    # `rent` - this method takes a `Boat` and a `Renter` as arguments.
    #Calling this method signifies that the `Boat` has been rented by
    #the `Renter`.
    #* `rental_log` - this method returns a hash that associates a
    #`Boat` with the `Renter` that rented it.
    @dock.rent(@kayak_1, @patrick)
    @dock.rent(@kayak_2, @patrick)
    @dock.rent(@sup_1, @eugene)
    expected = {
                @kayak_1 => @patrick,
                @kayak_2 => @patrick,
                @sup_1 => @eugene
              }
    assert_equal expected, @dock.rental_log
  end

  def test_it_can_charge
    skip
    @dock.rent(@kayak_1, @patrick)
    @dock.rent(@kayak_2, @patrick)
    @dock.rent(@sup_1, @eugene)
    @kayak_1.add_hour
    @kayak_1.add_hour
    expected_1 = {
        :card_number => "4242424242424242",
        :amount => 40
          }

    assert_equal expected_1, @dock.charge(@kayak_1)# =>

    @sup_1.add_hour
    @sup_1.add_hour
    @sup_1.add_hour
    # Any hours past the max rental time should not count
    @sup_1.add_hour
    @sup_1.add_hour
    expected_2 =  {
        :card_number => "1313131313131313",
        :amount => 45
          }

    assert_equal expected_2, @dock.charge(@sup_1)# =>
  end

  def test_it_can_return_log_hour_and_revenue
    skip
    # Rent Boats out to first Renter
    @dock.rent(@kayak_1, @patrick)
    @dock.rent(@kayak_2, @patrick)
    # kayak_1 and kayak_2 are rented an additional hour
    @dock.log_hour
    @dock.rent(@canoe, @patrick)
    # kayak_1, kayak_2, and canoe are rented an additional hour
    @dock.log_hour

    # Revenue should not be generated until boats are returned
    assert_equal 0, @dock.revenue #=> 0

    @dock.return(@kayak_1)
    @dock.return(@kayak_2)
    @dock.return(@canoe)

    # Revenue thus far
    assert_equal 105, @dock.revenue@
    # Rent Boats out to a second Renter
    @dock.rent(@sup_1, @eugene)
    @dock.rent(@sup_2, @eugene)
    @dock.log_hour
    @dock.log_hour
    @dock.log_hour
    # Any hours rented past the max rental time don't factor into revenue
    @dock.log_hour
    @dock.log_hour
    @dock.return(@sup_1)
    @dock.return(@sup_2)
    # Total revenue
    assert_equal 195, @dock.revenue #=> 195
  end

  def test_it_can_log_hour
    skip

end

# # * `return` - This method takes a `Boat` object as an argument.
# When this method is called, it signifies that a boat has been
# returned and is no longer being rented.
# # * `log_hour` - This method takes no arguments. When it is called,
# all boats that are currently rented have been rented an additional hour.
# # * `revenue` - This method takes no arguments. It returns the total
# revenue generated by charging all boats that have been rented and
# returned. A charge for a boat follows the same rules as iteration 3.
